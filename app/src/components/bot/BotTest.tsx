import React from 'react';
import { 
  Grid, 
  TextField, 
  Button, 
  Alert, 
  FormControl, 
  FormLabel, 
  FormControlLabel, 
  Radio, 
  InputLabel, 
  Select, 
  MenuItem,
  RadioGroup,
  Stack
} from '@mui/material';
import RequestQuoteIcon from '@mui/icons-material/RequestQuote';
import Loading from '../common/Loading';
import BotCast from './BotCast';
import { AppContext } from '../../AppContext';
import RequireSignIn from '../common/RequireSignIn';


class BotTest1 extends React.Component {

  static contextType = AppContext ;

  state = {
    channels: [],
    channel: null,
    mode: 'bot',
    query: '',
    loading: false,
    cost: null,
    result: null,
    error: null
  };

  placeholderBot = `Submit a message to test how your bot will respond when tagged or replied to:
  * Who are @dwr.eth's favorite users?
  * Who is most active in /data channel?
  * Give me a summary about bitcoin
  * Show me the funniest cast in tabletop channel
  * Make wordcloud for @vitalik.eth
  * Roast @randombishop
  * Psycho analyze @randombishop
  `

  placeholderAssistant = `Submit a prompt to see the casts that will be generated by your bot:
  * Praise a random user in the channel
  `
  componentDidMount = () => {
    this.loadChannels();
  }

  loadChannels() {
    const context:any = this.context;
    context.backendGET('/channels/list', (data: any[]) => {
      this.setState({channels: data, channel: data[0].id});
    });
  }

  begin = (doNext: () => void) => {
    this.setState({loading: true, cost: null, result: null, error: null}, doNext);
  };

  handleQueryChange = (event: any) => {
    this.setState({ query: event.target.value });
  };

  getPayload = () => {
    return {
      mode: this.state.mode,
      channel: this.state.channel,
      query: this.state.query
    };
  }

  quoteQuery = async () => {
    const context:any = this.context ;
    if (this.state.query.length < 10) {
      context.newAlert({type: 'error', message: 'Please enter a query (min 10 characters)'});
      return ;
    }
    this.begin(async () => {      
      const taskHandler = context.newTaskHandler() ;
      const payload = this.getPayload();
      const task = await taskHandler.runTask('/bot/quote', payload);
      const cost = task.result?task.result.cost : null ;
      this.setState({loading: false, cost: cost, error: task.error});
    }) ;
  };

  startQuery = () => {
    const context:any = this.context ;
    if (this.state.query.length < 10) {
      context.newAlert({type: 'error', message: 'Please enter a query (min 10 characters)'});
      return ;
    }
    this.begin(async () => {
      const taskHandler = context.newTaskHandler() ;
      const payload = this.getPayload();
      const task = await taskHandler.runTask('/bot/run', payload);
      this.setState({loading: false, result: task.result, error: task.error});
    }) ;
  };




  renderModeSelection = () => {
    return (
      <FormControl>
            <FormLabel>Mode</FormLabel>
            <RadioGroup
              row
              value={this.state.mode}
              onChange={(e) => this.setState({ mode: e.target.value })}
            >
              <FormControlLabel 
                value="bot" 
                control={<Radio />} 
                label="Autorepond"
              />
              <FormControlLabel
                value="assistant"
                control={<Radio />}
                label="Autopilot" 
              />
            </RadioGroup>
          </FormControl>
    )
  }
  
  renderChannelSelection = () => {
    if (this.state.channels.length === 0 || this.state.channel === null) {
      return null;
    }
    return (
      <FormControl fullWidth sx={{ mt: 2 }}>
        <InputLabel>Channel</InputLabel>
        <Select
          value={this.state.channel}
          label="Channel"
          onChange={(e) => this.setState({ channel: e.target.value })}
        >
          {this.state.channels.map((channel: any) => (
            <MenuItem key={channel.id} value={channel.id}>
              {channel.name}
            </MenuItem>
          ))}
        </Select>
      </FormControl>
    )
  }


  renderQueryInput = () => {
    return (
      <TextField
            label="Enter your query"
            placeholder={this.state.mode === 'bot' ? this.placeholderBot : this.placeholderAssistant}
            value={this.state.query}
            onChange={this.handleQueryChange}
            multiline
            minRows={8}
            maxRows={30}
            fullWidth
          />
    )
  }


  renderQuoteButton = () => {
    return (
      <Button onClick={this.quoteQuery} fullWidth
            startIcon={<RequestQuoteIcon />}
            disabled={this.state.loading}>
              Quote
      </Button>
    )
  }
  
  renderStartButton = () => {
    return (
      <Button onClick={this.startQuery} fullWidth
            variant="contained"
            style={{ marginTop: '10px' }}
            disabled={this.state.loading}>
              Run Query
          </Button>
    )
  }

  renderLoading = () => {
    if (this.state.loading) {
      return <Loading />;
    }
  };

  renderError = () => {
    if (this.state.error) {
      return <Alert severity="error">{this.state.error}</Alert>;
    }
  };

  renderCost = () => {
    if (this.state.cost) {
      return <Alert severity="success">Your query will cost {this.state.cost} credits.</Alert>;
    }
  };

  renderResult = () => {
    if (this.state.result) {
      const result:any = this.state.result ;
      if (result.casts && result.casts.length > 0) {
        const casts = result.casts ;
        return (
          <React.Fragment>
            {casts.map((cast: any, index: number) => (
              <BotCast cast={cast} key={index} />
            ))}
          </React.Fragment>
        );
      }
    }
  };

  render() {
    return (
      <Grid container spacing={3}>

        <Grid item xs={4}>
          <Stack spacing={2}>
            {this.renderModeSelection()}
            {this.renderChannelSelection()}
            {this.renderQuoteButton()}
            {this.renderLoading()}
            {this.renderError()}
            {this.renderCost()}
          </Stack>
        </Grid>

        <Grid item xs={8}>
          {this.renderQueryInput()}
        </Grid>

        <Grid item xs={12}>
           {this.renderStartButton()}
        </Grid>

        {this.renderResult()}
        
      </Grid>
    );
  }
}


const BotTest = () => {
  return RequireSignIn(<BotTest1 />)
};

export default BotTest ;
